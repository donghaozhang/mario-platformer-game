---
description:
globs:
alwaysApply: false
---
# Mario Game Enemy Variety System

This document outlines the comprehensive enemy variety system implemented in the Mario game, featuring multiple enemy types with unique behaviors, animations, and interactions.

## Enemy Types Overview

The game features 5 distinct enemy types, each with unique characteristics:

1. **Goomba** - Basic walking enemy
2. **Koopa** - Shell-based enemy with transformation mechanics
3. **Flying** - Aerial enemy with sine wave movement
4. **Boss** - Large enemy with multiple health and special attacks
5. **Koopa Shell** - Transformed state of Koopa with physics-based movement

## Enemy Type Specifications

### 1. Goomba Enemy
**File**: `js/physics.js` - `updateGoomba()`
**Characteristics**:
- Basic walking AI with platform edge detection
- Standard size: 25x25 pixels
- Speed: Variable (-1 to 1)
- Color: Dark red (#8B0000)
- Points: 100

**Behavior**:
- Walks back and forth on platforms
- Reverses direction at platform edges
- Dies immediately when jumped on
- Basic 2-frame walking animation

### 2. Koopa Enemy
**File**: `js/physics.js` - `updateKoopa()`
**Characteristics**:
- Shell-based enemy with transformation
- Size: 25x25 pixels
- Speed: Faster than Goomba (0.8-1.2)
- Color: Green (#228B22)
- Points: 150

**Behavior**:
- Faster movement with acceleration on direction change
- Transforms into shell when jumped on
- Shell can be kicked and used as weapon
- 3-frame walking animation with shell pattern

**Shell Mechanics**:
- Becomes `koopa_shell` type when defeated
- Smaller size: 25x15 pixels
- Kickable physics with friction
- Can defeat other enemies when moving fast

### 3. Flying Enemy
**File**: `js/physics.js` - `updateFlyingEnemy()`
**Characteristics**:
- Aerial movement with sine wave pattern
- Size: 20x15 pixels
- Speed: Variable horizontal, sine wave vertical
- Color: Orange (#FF4500)
- Points: 200

**Behavior**:
- Flies in sine wave pattern using `Math.sin()`
- Amplitude: 30 pixels, Frequency: 0.02
- Transforms to Goomba when jumped on
- 4-frame wing flapping animation
- Ignores platform collision (flies freely)

### 4. Boss Enemy
**File**: `js/physics.js` - `updateBossEnemy()`
**Characteristics**:
- Large enemy with multiple health
- Size: 30x30 to 35x35 pixels
- Health: 3-5 hits depending on level
- Color: Purple (#8B008B), turns red when damaged
- Points: 300 per hit, 1000 when defeated

**Behavior**:
- Complex AI with timed direction changes (120 frames)
- Occasional jumping ability
- Health bar display above enemy
- Gets faster and angrier when damaged
- Gravity-affected movement
- 2-frame animation with crown and spikes

### 5. Koopa Shell
**File**: `js/physics.js` - `updateKoopaShell()`
**Characteristics**:
- Transformed state of Koopa
- Size: 25x15 pixels
- Physics-based movement with friction
- Color: Light green (#8FBC8F)
- Points: 100 when kicked

**Behavior**:
- Kickable by player contact
- Friction-based deceleration (0.98 multiplier)
- Bounces off walls with energy loss
- Can defeat other enemies on contact
- 4-frame spinning animation when moving

## Implementation Architecture

### Physics System (`js/physics.js`)

#### Main Update Function
```javascript
function updateEnemies() {
    for (let enemy of enemies) {
        switch (enemy.type) {
            case 'goomba': updateGoomba(enemy); break;
            case 'koopa': updateKoopa(enemy); break;
            case 'flying': updateFlyingEnemy(enemy); break;
            case 'boss': updateBossEnemy(enemy); break;
            case 'koopa_shell': updateKoopaShell(enemy); break;
        }
    }
}
```

#### Collision Handling
```javascript
function handleEnemyJumpAttack(enemy, index) {
    // Different behavior per enemy type
    switch (enemy.type) {
        case 'goomba': /* Dies immediately */ break;
        case 'koopa': /* Transforms to shell */ break;
        case 'flying': /* Becomes walking enemy */ break;
        case 'boss': /* Takes damage, health system */ break;
        case 'koopa_shell': /* Gets kicked */ break;
    }
}
```

### Animation System (`js/animations.js`)

#### Enemy-Specific Animations
```javascript
function updateEnemyAnimation(enemy) {
    switch (enemy.type) {
        case 'goomba': /* 2 frames, 15 frame timer */
        case 'koopa': /* 3 frames, 10 frame timer */
        case 'flying': /* 4 frames, 8 frame timer */
        case 'boss': /* 2 frames, 20 frame timer */
        case 'koopa_shell': /* 4 frames when moving */
    }
}
```

### Rendering System (`js/renderer.js`)

#### Enemy-Specific Drawing
- `drawGoomba()` - Basic enemy with eyes and feet
- `drawKoopa()` - Shell pattern with head and legs
- `drawFlyingEnemy()` - Wings with flapping animation
- `drawBossEnemy()` - Crown, health bar, spikes
- `drawKoopaShell()` - Spinning shell pattern

## Level Integration

### Enemy Placement (`js/levelSystem.js`)
Each level features different enemy combinations:

**Level 1 (Green Hills)**:
- 3 Goombas, 1 Koopa, 1 Flying enemy

**Level 2 (Underground Caverns)**:
- 2 Goombas, 1 Koopa, 1 Flying, 1 Boss (3 health)

**Level 3 (Sky Castle)**:
- 2 Goombas, 1 Koopa, 2 Flying, 1 Boss (5 health)

### Enemy Properties in Level Data
```javascript
enemies: [
    { x: 300, y: 340, width: 25, height: 25, velocityX: -1, 
      color: '#8B0000', type: 'goomba' },
    { x: 500, y: 340, width: 25, height: 25, velocityX: 0.8, 
      color: '#228B22', type: 'koopa' },
    { x: 150, y: 200, width: 20, height: 15, velocityX: 1, velocityY: -2, 
      color: '#FF4500', type: 'flying', flyHeight: 200, originalY: 200 },
    { x: 700, y: 340, width: 30, height: 30, velocityX: -0.5, 
      color: '#8B008B', type: 'boss', health: 3, maxHealth: 3 }
]
```

## Scoring System

### Point Values by Enemy Type
- **Goomba**: 100 points
- **Koopa**: 150 points (200 for shell kick)
- **Flying**: 200 points
- **Boss**: 300 points per hit, 1000 for defeat
- **Koopa Shell**: 100 points when kicked

### Star Power Multipliers
All enemies give standard points when defeated by star power.

## Special Mechanics

### Koopa Shell Physics
- Friction coefficient: 0.98
- Minimum velocity threshold: 0.1
- Wall bounce energy loss: 0.8
- Enemy defeat velocity threshold: 1.0

### Flying Enemy Movement
```javascript
// Sine wave calculation
const amplitude = 30;
const frequency = 0.02;
enemy.y = enemy.originalY + Math.sin(Date.now() * frequency + enemy.x * 0.01) * amplitude;
```

### Boss Health System
- Health bar rendering above boss
- Color change when damaged (purple â†’ red)
- Speed increase on damage
- Jump probability: 30% on direction change

## Development Guidelines

### Adding New Enemy Types
1. **Define enemy in level data** with type property
2. **Add case to updateEnemies()** switch statement
3. **Create update function** in `js/physics.js`
4. **Add animation case** in `js/animations.js`
5. **Create drawing function** in `js/renderer.js`
6. **Update collision handling** in `handleEnemyJumpAttack()`

### Enemy Behavior Patterns
- **Movement**: Use velocityX for horizontal, custom logic for vertical
- **Platform Detection**: Check platform collision for ground enemies
- **Boundary Checking**: Reverse direction at screen edges
- **Animation**: Frame-based timing with enemy-specific intervals
- **State Management**: Use enemy properties for behavior state

### Performance Considerations
- **Efficient Collision**: Early returns in collision detection
- **Animation Optimization**: Different frame rates per enemy type
- **Memory Management**: Remove defeated enemies from arrays
- **Rendering Order**: Draw enemies before player for proper layering

This enemy variety system provides rich gameplay with diverse challenges and interactions, enhancing the classic Mario platformer experience.
