---
description: 
globs: 
alwaysApply: false
---
# Mario Power-ups System Guide

This rule documents the power-ups system implementation in the Mario game, including patterns for creating, managing, and rendering power-ups.

## Power-up Object Structure

All power-ups in [script.js](mdc:script.js) follow this consistent structure:
```javascript
{
    x: number,           // X position
    y: number,           // Y position  
    width: number,       // Collision width
    height: number,      // Collision height
    type: string,        // 'mushroom', 'fireflower', 'star'
    collected: boolean,  // Collection state
    animationFrame: number,    // Current animation frame
    animationTimer: number,    // Animation timing counter
    velocityX?: number,  // Movement velocity (star only)
    velocityY?: number   // Vertical velocity (star only)
}
```

## Power-up Types and Effects

### Mushroom Power-up üçÑ
- **Effect**: Grows Mario from small to big
- **Properties**: Increases height (40‚Üí50px), speed (3‚Üí3.5), jumpPower (12‚Üí14)
- **Visual**: Red cap with white spots, animated bobbing
- **Protection**: Provides one extra hit before death

### Fire Flower Power-up üå∏
- **Effect**: Upgrades Mario to Fire Mario
- **Properties**: Orange-red color, enhanced abilities, fireball shooting
- **Controls**: X key to shoot fireballs
- **Visual**: Color-changing flower animation (4 colors)

### Star Power-up ‚≠ê
- **Effect**: 10 seconds of invincibility
- **Properties**: Rainbow color cycling, enemy destruction on contact
- **Physics**: Bounces around level with gravity and platform collision
- **Visual**: Spinning star with inner highlight

## Player Power-up States

The player object in [script.js](mdc:script.js) tracks power-up state:
```javascript
player.powerUpState: 'small' | 'big' | 'fire'
player.starPower: boolean
player.starTimer: number (600 frames = 10 seconds)
player.invincible: boolean
player.invincibleTimer: number
```

## Damage System Pattern

Power-up downgrades follow this hierarchy:
1. **Fire Mario** ‚Üí Big Mario (lose fire ability)
2. **Big Mario** ‚Üí Small Mario (lose size)
3. **Small Mario** ‚Üí Death

Each downgrade grants 2 seconds (120 frames) of invincibility.

## Fireball System

Fire Mario can shoot fireballs with these properties:
- **Rate Limit**: 300ms between shots
- **Physics**: Gravity (0.2), bouncing off platforms
- **Collision**: Destroys enemies on contact
- **Lifespan**: 3 seconds (180 frames)
- **Visual**: Rotating fire sprite with yellow core

## Animation Patterns

### Power-up Animations
- **Mushroom**: 2-frame bobbing (10 frames per change)
- **Fire Flower**: 4-color cycling (8 frames per change)  
- **Star**: 8-frame spinning (4 frames per change)

### Player Visual Effects
- **Star Power**: Rainbow color cycling every 100ms
- **Invincibility**: 50% opacity flashing every 100ms
- **Fire Mario**: Orange-red (#FF4500) color

## Implementation Functions

Key functions for power-up system:
- `updatePowerUpAnimation(powerUp)` - Handle power-up animations
- `checkPowerUpCollisions()` - Detect player-powerup collision
- `applyPowerUp(type)` - Apply power-up effects to player
- `takeDamage()` - Handle power-up downgrades
- `shootFireball()` - Create and fire projectiles
- `updateFireballs()` - Update fireball physics and collisions
- `drawAnimatedPowerUp(powerUp)` - Render power-ups with animations

## Collision Detection

Power-ups use the standard AABB collision function:
```javascript
if (!powerUp.collected && isColliding(player, powerUp)) {
    powerUp.collected = true;
    applyPowerUp(powerUp.type);
    // Effects and scoring
}
```

## Level Integration

Power-ups are created in `createLevel()` and added to the `powerUps[]` array. They integrate with:
- Game loop updates (`updateAnimations()`)
- Collision system (`checkPowerUpCollisions()`)
- Rendering pipeline (`drawPowerUps()`)
- Particle effects (`createPowerUpParticles()`)

## Extension Guidelines

When adding new power-ups:
1. Add new type to power-up object structure
2. Implement animation logic in `updatePowerUpAnimation()`
3. Add effect logic in `applyPowerUp()`
4. Create visual representation in `drawAnimatedPowerUp()`
5. Update damage system if needed in `takeDamage()`
6. Add to level creation in `createLevel()`

